$date
   Mon Jul 21 16:06:25 2025
$end

$version
  2024.2.0
  $dumpfile ("inverse_sbox.vcd") 
$end

$timescale
  1ps
$end

$scope module tb $end
$var reg 8 ! in [7:0] $end
$var wire 8 " out [7:0] $end
$scope module uut $end
$var wire 8 # in [7:0] $end
$var wire 8 " out [7:0] $end
$var wire 8 $ scrambled [7:0] $end
$var wire 8 % inv [7:0] $end
$scope function gf_mul $end
$var reg 8 & gf_mul [7:0] $end
$var reg 8 ' a [7:0] $end
$var reg 8 ( b [7:0] $end
$var integer 32 ) i [31:0] $end
$var reg 8 * p [7:0] $end
$var reg 8 + aa [7:0] $end
$var reg 8 , bb [7:0] $end
$upscope $end
$scope function gf_pow $end
$var reg 8 - gf_pow [7:0] $end
$var reg 8 . base [7:0] $end
$var reg 8 / power [7:0] $end
$var reg 8 0 result [7:0] $end
$var reg 8 1 b [7:0] $end
$var reg 8 2 p [7:0] $end
$upscope $end
$scope function gf_inv $end
$var reg 8 3 gf_inv [7:0] $end
$var reg 8 4 a [7:0] $end
$upscope $end
$scope function inverse_affine_transform $end
$var reg 8 5 inverse_affine_transform [7:0] $end
$var reg 8 6 b [7:0] $end
$var integer 32 7 i [31:0] $end
$var reg 8 8 d [7:0] $end
$var reg 1 9 bit $end
$var reg 8 : result [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
b0 !
b1010010 "
b0 #
b101 $
b1010010 %
b101 &
b11 '
b11 (
b1000 )
b101 *
b101101 +
b0 ,
b1010010 -
b101 .
b11111110 /
b1010010 0
b101 1
b0 2
b1010010 3
b101 4
b101 5
b0 6
b1000 7
b101 8
09
b101 :
$end

#10000
b1100011 !
b0 "
b1100011 #
b0 $
b0 %
b0 3
b0 4
b0 5
b1100011 6
b1000 7
b0 :

#20000
b11101101 !
b1010011 "
b11101101 #
b11001010 $
b1010011 %
b11001010 &
b10001100 '
b10001100 (
b1000 )
b11001010 *
b10011011 +
b0 ,
b1010011 -
b11001010 .
b1010011 0
b11001010 1
b0 2
b1010011 3
b11001010 4
b11001010 5
b11101101 6
b1000 7
19
b11001010 :

#30000
b10000100 !
b1001111 "
b10000100 #
b1001 $
b1001111 %
b1001 &
b11101110 '
b11101110 (
b1000 )
b1001 *
b1111010 +
b0 ,
b1001111 -
b1001 .
b1001111 0
b1001 1
b0 2
b1001111 3
b1001 4
b1001 5
b10000100 6
b1000 7
09
b1001 :

#40000
b1101011 !
b101 "
b1101011 #
b1010010 $
b101 %
b1010010 &
b11110110 '
b11110110 (
b1000 )
b1010010 *
b1001 +
b0 ,
b101 -
b1010010 .
b101 0
b1010010 1
b0 2
b101 3
b1010010 4
b1010010 5
b1101011 6
b1000 7
09
b1010010 :
